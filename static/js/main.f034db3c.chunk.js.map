{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostHandler","useState","postOpened","setPostOpened","className","map","post","id","title","type","classNames","onClick","selectedPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","commentsFromServer","name","setName","email","setEmail","text","setText","isNameDanger","setIsNameDanger","isEmailDanger","setIsEmailDanger","isTextDanger","setIsTextDanger","isLoadingComment","setIsLoadingComment","newCommentPost","a","postId","useEffect","timeout","clearTimeout","onSubmit","event","preventDefault","htmlFor","placeholder","value","onChange","target","PostDetails","comments","setComments","isError","setIsError","isLoader","setIsLoader","isCommentAdder","setIsCommentAdder","result","deleteButtonHandler","commentId","length","comment","href","UserSelector","users","selectedUserHandler","isdropdownMenu","setIsdropdownMenu","selectedUser","setSelectedUser","role","user","dropdownItemHandler","App","setUsers","setPosts","setSelectedPost","usersFromServer","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f034db3c.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[]\n  selectedPostHandler: (post: Post | null) => void\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, selectedPostHandler }) => {\n  const [postOpened, setPostOpened] = useState<Post | null>(null);\n\n  const selectedPost = (post: Post) => {\n    if (postOpened === null || postOpened.id !== post.id) {\n      setPostOpened(post);\n      selectedPostHandler(post);\n    } else {\n      setPostOpened(null);\n      selectedPostHandler(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': post.id !== postOpened?.id,\n                  })}\n                  onClick={() => selectedPost(post)}\n                >\n                  {post.id === postOpened?.id ? ('Close') : ('Open')}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(0)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  selectedPost: Post\n  commentsFromServer: () => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  commentsFromServer,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n  const [isNameDanger, setIsNameDanger] = useState(false);\n  const [isEmailDanger, setIsEmailDanger] = useState(false);\n  const [isTextDanger, setIsTextDanger] = useState(false);\n  const [isLoadingComment, setIsLoadingComment] = useState(false);\n\n  const newCommentPost = async () => {\n    await client.post('/comments', {\n      postId: selectedPost.id,\n      name,\n      email,\n      body: text,\n    });\n  };\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (name !== '' && email !== '' && text !== '') {\n      newCommentPost();\n      setIsLoadingComment(true);\n    }\n\n    if (name === '') {\n      setIsNameDanger(true);\n    }\n\n    if (email === '') {\n      setIsEmailDanger(true);\n    }\n\n    if (text === '') {\n      setIsTextDanger(true);\n    }\n  };\n\n  const clearButtonHandler = () => {\n    setText('');\n    setEmail('');\n    setName('');\n    setIsNameDanger(false);\n    setIsEmailDanger(false);\n    setIsTextDanger(false);\n  };\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setIsLoadingComment(false);\n      commentsFromServer();\n      setText('');\n    }, 300);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [isLoadingComment]);\n\n  useEffect(() => {\n    if (name !== '') {\n      setIsNameDanger(false);\n    }\n\n    if (email !== '') {\n      setIsEmailDanger(false);\n    }\n\n    if (text !== '') {\n      setIsTextDanger(false);\n    }\n  }, [name, email, text]);\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isNameDanger,\n            })}\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameDanger && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameDanger && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmailDanger,\n            })}\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailDanger && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailDanger && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isTextDanger,\n            })}\n            value={text}\n            onChange={(event) => setText(event.target.value)}\n          />\n        </div>\n\n        {isTextDanger && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div\n          className=\"control\"\n        >\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoadingComment,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearButtonHandler}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  selectedPost: Post\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isCommentAdder, setIsCommentAdder] = useState(false);\n\n  const commentsFromServer = async () => {\n    try {\n      const result: Comment[] = await client.get(`/comments?postId=${selectedPost.id}`);\n\n      setComments(result);\n      setIsLoader(false);\n    } catch {\n      setIsError(true);\n      setIsLoader(false);\n    }\n  };\n\n  const deleteButtonHandler = async (commentId: number) => {\n    await client.delete(`/comments/${commentId}`);\n    commentsFromServer();\n  };\n\n  useEffect(() => {\n    setIsLoader(true);\n\n    const timeout = setTimeout(() => {\n      setIsCommentAdder(false);\n      commentsFromServer();\n    }, 300);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoader && (<Loader />)}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(comments?.length === 0 && !isLoader && !isError) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(comments?.length > 0 && !isLoader) && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments?.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => deleteButtonHandler(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n          {(!isCommentAdder && !isLoader) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsCommentAdder(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {(isCommentAdder && !isLoader) && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            commentsFromServer={commentsFromServer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | undefined\n  selectedUserHandler: (user: User) => void\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUserHandler,\n}) => {\n  const [isdropdownMenu, setIsdropdownMenu] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  const onClickHandler = () => {\n    setIsdropdownMenu(!isdropdownMenu);\n  };\n\n  const dropdownItemHandler = (user: User) => {\n    setSelectedUser(user);\n    selectedUserHandler(user);\n    setIsdropdownMenu(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={onClickHandler}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isdropdownMenu && (\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n        >\n          <div className=\"dropdown-content\">\n            {users?.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': selectedUser?.id === user.id,\n                })}\n                onClick={() => dropdownItemHandler(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoader, setIsLoader] = useState(false);\n\n  const selectedPostHandler = (post: Post | null) => {\n    setSelectedPost(post);\n  };\n\n  const selectedUserHandler = (user: User) => {\n    setSelectedUser(user);\n  };\n\n  const usersFromServer = async () => {\n    try {\n      const result: User[] = await client.get('/users');\n\n      setUsers(result);\n    } catch {\n      setIsError(true);\n      setIsLoader(false);\n    }\n  };\n\n  const postsFromServer = async () => {\n    const result: Post[] = await client.get(`/posts?userId=${selectedUser?.id}`);\n\n    setPosts(result);\n    setIsLoader(false);\n  };\n\n  useEffect(() => {\n    setPosts([]);\n    setSelectedPost(null);\n    if (selectedUser !== null) {\n      setIsLoader(true);\n    }\n\n    const timeout: NodeJS.Timeout = setTimeout(() => {\n      postsFromServer();\n    }, 500);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [selectedUser]);\n\n  useEffect(() => {\n    usersFromServer();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserHandler={selectedUserHandler}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser === null && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoader && (<Loader />)}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(posts.length === 0 && !isLoader && selectedUser) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostHandler={selectedPostHandler}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails selectedPost={selectedPost} />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}